import flet as ft

from database.DAO import DAO


class Controller:
    def __init__(self, view, model):
        # the view, with the graphical elements of the UI
        self._view = view
        # the model, which implements the logic of the program and holds the data
        self._model = model


    def fillDD(self):

        generi = self._model.get_generi()
        for g in generi:
            self._view.ddgenere.options.append(ft.dropdown.Option(key = g.GenreId, text=g.Name))




    def handle_graph(self, e):

        self._view.txt_result.controls.clear()
        g = self._view.ddgenere.value
        if g is None or g == '':
            self._view.create_alert('Selezionare un genere musicale')
            return

        self._model.build_graph(g)
        nNodes, nEdges = self._model.getCaratteristiche()
        self._view.txt_result.controls.append(ft.Text('Grafo creato!'))
        self._view.txt_result.controls.append(ft.Text(f"Il grafo ha {nNodes} nodi e {nEdges} vertici"))
        self._view.update_page()


    def handle_delta_max(self, e):

        # Pulisce i risultati precedenti
        self._view.txt_result.controls.clear()

        g = self._view.ddgenere.value
        if g is None:
            self._view.create_alert("Selezionare un genere musicale.")
            return

        result = self._model.getDeltaMassimo(g)
        if result is None:
            self._view.create_alert("Nessun arco trovato con Δ durata massimo.")
            return

        # Mostra il risultato
        canzone1, canzone2, delta = result
        self._view.txt_result.controls.append(ft.Text(f"{canzone2}, {canzone1}, Δ durata: {delta} ms"))
        self.fillDDCanzone()
        self._view.update_page()

    def fillDDCanzone(self):
        self._view.ddcanzone.options.clear()  # Pulisce le opzioni precedenti
        for node in self._model._grafo.nodes:
            track_name = self._model._grafo.nodes[node]['name']
            self._view.ddcanzone.options.append(ft.dropdown.Option(key=node, text=track_name))
        self._view.update_page()  # Aggiorna la vista per riflettere i cambiamenti

    def handle_path(self, e):
        self._view.txt_result.controls.clear()

        canzone_id = self._view.ddcanzone.value  # TrackId selezionato dal grafo
        memoria_max = int(self._view.text.value)  # Capacità massima di memoria

        if canzone_id is None or memoria_max <= 0:
            self._view.create_alert("Inserire una canzone e una memoria valida.")
            return

        cammino, totale = self._model.get_componente_connessa(canzone_id, memoria_max)

        if not cammino:
            self._view.create_alert("Nessuna combinazione di canzoni trovata.")
            return

        for n in cammino:
            self._view.txt_result.controls.append(ft.Text(f"Canzone: {n}"))

        self._view.txt_result.controls.append(ft.Text(f"Numero di canzoni: {totale}"))
        self._view.update_page()
