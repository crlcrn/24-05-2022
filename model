from database.DAO import DAO
import networkx as nx


class Model:
    def __init__(self):
        self._bestLen = None
        self._grafo = nx.Graph()

    def get_generi(self):
        generi = DAO.getGenre()
        return generi

    def build_graph(self, g):
        self._grafo.clear()
        self._nodes = []
        self._edges = []

        canzoni = DAO.getAllNodes(g)
        for c in canzoni:
            if c not in self._nodes:
                self._grafo.add_node(c.TrackId, name = c.Name, bytes = c.Bytes)

        edges = DAO.getAllEdges(g)

        for track1, track2, duration1, duration2 in edges:
            peso = abs(duration1-duration2)
            self._grafo.add_edge(track1, track2, weight = peso)

    def getDeltaMassimo(self, genre):
        # Chiamata al DAO per ottenere il Î” massimo
        result = DAO.getMaxDeltaEdges(genre)
        if result:
            # Restituisce direttamente i nomi delle canzoni e il valore massimo
            return result[0]
        return None


    def getCaratteristiche(self):
        return self._grafo.number_of_nodes(), self._grafo.number_of_edges()

    def get_componente_connessa(self, canzone, m):
        if canzone not in self._grafo.nodes:
            return [], 0

        component = nx.node_connected_component(self._grafo, canzone)
        parziale = list(component)

        self._ricorsione(parziale, component, m)

        return self._bestPath, len(self._bestPath)

    def _ricorsione(self, parziale, component, m, current_bytes):
        if current_bytes > m:
            return

        if len(parziale) > self._bestLen:
            self._bestLen = len(parziale)
            self._bestPath = parziale[:]

        for v in component:
            if v not in parziale:
                parziale.append(v)
                next_bytes = current_bytes + self._grafo.nodes[v]['bytes']  # Aggiunge i Bytes del nodo corrente
                self._ricorsione(parziale, component, m, next_bytes)
                parziale.pop()
